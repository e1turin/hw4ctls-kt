// Generated by jextract

package io.github.e1turin.cirkt.jextracted;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct State {
 *     char clk;
 *     char reset;
 *     char clk_internal;
 *     char reset_internal;
 *     char _gap;
 *     char reg_internal;
 *     char o_internal;
 *     char o;
 * }
 * }
 */
public class State {

    State() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        dut_h.C_CHAR.withName("clk"),
        dut_h.C_CHAR.withName("reset"),
        dut_h.C_CHAR.withName("clk_internal"),
        dut_h.C_CHAR.withName("reset_internal"),
        dut_h.C_CHAR.withName("_gap"),
        dut_h.C_CHAR.withName("reg_internal"),
        dut_h.C_CHAR.withName("o_internal"),
        dut_h.C_CHAR.withName("o")
    ).withName("State");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfByte clk$LAYOUT = (OfByte)$LAYOUT.select(groupElement("clk"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char clk
     * }
     */
    public static final OfByte clk$layout() {
        return clk$LAYOUT;
    }

    private static final long clk$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char clk
     * }
     */
    public static final long clk$offset() {
        return clk$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char clk
     * }
     */
    public static byte clk(MemorySegment struct) {
        return struct.get(clk$LAYOUT, clk$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char clk
     * }
     */
    public static void clk(MemorySegment struct, byte fieldValue) {
        struct.set(clk$LAYOUT, clk$OFFSET, fieldValue);
    }

    private static final OfByte reset$LAYOUT = (OfByte)$LAYOUT.select(groupElement("reset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char reset
     * }
     */
    public static final OfByte reset$layout() {
        return reset$LAYOUT;
    }

    private static final long reset$OFFSET = 1;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char reset
     * }
     */
    public static final long reset$offset() {
        return reset$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char reset
     * }
     */
    public static byte reset(MemorySegment struct) {
        return struct.get(reset$LAYOUT, reset$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char reset
     * }
     */
    public static void reset(MemorySegment struct, byte fieldValue) {
        struct.set(reset$LAYOUT, reset$OFFSET, fieldValue);
    }

    private static final OfByte clk_internal$LAYOUT = (OfByte)$LAYOUT.select(groupElement("clk_internal"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char clk_internal
     * }
     */
    public static final OfByte clk_internal$layout() {
        return clk_internal$LAYOUT;
    }

    private static final long clk_internal$OFFSET = 2;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char clk_internal
     * }
     */
    public static final long clk_internal$offset() {
        return clk_internal$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char clk_internal
     * }
     */
    public static byte clk_internal(MemorySegment struct) {
        return struct.get(clk_internal$LAYOUT, clk_internal$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char clk_internal
     * }
     */
    public static void clk_internal(MemorySegment struct, byte fieldValue) {
        struct.set(clk_internal$LAYOUT, clk_internal$OFFSET, fieldValue);
    }

    private static final OfByte reset_internal$LAYOUT = (OfByte)$LAYOUT.select(groupElement("reset_internal"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char reset_internal
     * }
     */
    public static final OfByte reset_internal$layout() {
        return reset_internal$LAYOUT;
    }

    private static final long reset_internal$OFFSET = 3;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char reset_internal
     * }
     */
    public static final long reset_internal$offset() {
        return reset_internal$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char reset_internal
     * }
     */
    public static byte reset_internal(MemorySegment struct) {
        return struct.get(reset_internal$LAYOUT, reset_internal$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char reset_internal
     * }
     */
    public static void reset_internal(MemorySegment struct, byte fieldValue) {
        struct.set(reset_internal$LAYOUT, reset_internal$OFFSET, fieldValue);
    }

    private static final OfByte _gap$LAYOUT = (OfByte)$LAYOUT.select(groupElement("_gap"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char _gap
     * }
     */
    public static final OfByte _gap$layout() {
        return _gap$LAYOUT;
    }

    private static final long _gap$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char _gap
     * }
     */
    public static final long _gap$offset() {
        return _gap$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char _gap
     * }
     */
    public static byte _gap(MemorySegment struct) {
        return struct.get(_gap$LAYOUT, _gap$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char _gap
     * }
     */
    public static void _gap(MemorySegment struct, byte fieldValue) {
        struct.set(_gap$LAYOUT, _gap$OFFSET, fieldValue);
    }

    private static final OfByte reg_internal$LAYOUT = (OfByte)$LAYOUT.select(groupElement("reg_internal"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char reg_internal
     * }
     */
    public static final OfByte reg_internal$layout() {
        return reg_internal$LAYOUT;
    }

    private static final long reg_internal$OFFSET = 5;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char reg_internal
     * }
     */
    public static final long reg_internal$offset() {
        return reg_internal$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char reg_internal
     * }
     */
    public static byte reg_internal(MemorySegment struct) {
        return struct.get(reg_internal$LAYOUT, reg_internal$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char reg_internal
     * }
     */
    public static void reg_internal(MemorySegment struct, byte fieldValue) {
        struct.set(reg_internal$LAYOUT, reg_internal$OFFSET, fieldValue);
    }

    private static final OfByte o_internal$LAYOUT = (OfByte)$LAYOUT.select(groupElement("o_internal"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char o_internal
     * }
     */
    public static final OfByte o_internal$layout() {
        return o_internal$LAYOUT;
    }

    private static final long o_internal$OFFSET = 6;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char o_internal
     * }
     */
    public static final long o_internal$offset() {
        return o_internal$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char o_internal
     * }
     */
    public static byte o_internal(MemorySegment struct) {
        return struct.get(o_internal$LAYOUT, o_internal$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char o_internal
     * }
     */
    public static void o_internal(MemorySegment struct, byte fieldValue) {
        struct.set(o_internal$LAYOUT, o_internal$OFFSET, fieldValue);
    }

    private static final OfByte o$LAYOUT = (OfByte)$LAYOUT.select(groupElement("o"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char o
     * }
     */
    public static final OfByte o$layout() {
        return o$LAYOUT;
    }

    private static final long o$OFFSET = 7;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char o
     * }
     */
    public static final long o$offset() {
        return o$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char o
     * }
     */
    public static byte o(MemorySegment struct) {
        return struct.get(o$LAYOUT, o$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char o
     * }
     */
    public static void o(MemorySegment struct, byte fieldValue) {
        struct.set(o$LAYOUT, o$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

