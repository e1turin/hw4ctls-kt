; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@"_arc_sim_emit_full_counter value" = internal constant [21 x i8] c"counter value = %zx\0A\00"

declare void @printf(ptr, ...)

declare void @free(ptr)

declare ptr @malloc(i64)

declare void @exit(i32)

define void @counter_eval(ptr %0) {
  %2 = load i1, ptr %0, align 1
  %3 = getelementptr i8, ptr %0, i32 1
  store i1 %2, ptr %3, align 1
  %4 = load i1, ptr %0, align 1
  %5 = getelementptr i8, ptr %0, i32 2
  %6 = load i1, ptr %5, align 1
  store i1 %4, ptr %5, align 1
  %7 = xor i1 %6, %4
  %8 = and i1 %7, %4
  br i1 %8, label %9, label %13

9:                                                ; preds = %1
  %10 = getelementptr i8, ptr %0, i32 3
  %11 = load i8, ptr %10, align 1
  %12 = add i8 %11, 1
  store i8 %12, ptr %10, align 1
  br label %13

13:                                               ; preds = %9, %1
  %14 = getelementptr i8, ptr %0, i32 3
  %15 = load i8, ptr %14, align 1
  %16 = getelementptr i8, ptr %0, i32 4
  store i8 %15, ptr %16, align 1
  %17 = load i8, ptr %14, align 1
  %18 = getelementptr i8, ptr %0, i32 5
  store i8 %17, ptr %18, align 1
  ret void
}

define void @entry() {
  %1 = call ptr @malloc(i64 6)
  call void @llvm.memset.p0.i64(ptr %1, i8 0, i64 6, i1 false)
  store i1 true, ptr %1, align 1
  call void @counter_eval(ptr %1)
  store i1 false, ptr %1, align 1
  call void @counter_eval(ptr %1)
  %2 = getelementptr i8, ptr %1, i32 4
  %3 = load i8, ptr %2, align 1
  %4 = zext i8 %3 to i64
  call void (ptr, ...) @printf(ptr @"_arc_sim_emit_full_counter value", i64 %4)
  store i1 true, ptr %1, align 1
  call void @counter_eval(ptr %1)
  store i1 false, ptr %1, align 1
  call void @counter_eval(ptr %1)
  store i1 true, ptr %1, align 1
  call void @counter_eval(ptr %1)
  store i1 false, ptr %1, align 1
  call void @counter_eval(ptr %1)
  %5 = load i8, ptr %2, align 1
  %6 = zext i8 %5 to i64
  call void (ptr, ...) @printf(ptr @"_arc_sim_emit_full_counter value", i64 %6)
  call void @free(ptr %1)
  ret void
}

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: write)
declare void @llvm.memset.p0.i64(ptr writeonly captures(none), i8, i64, i1 immarg) #0

attributes #0 = { nocallback nofree nounwind willreturn memory(argmem: write) }

!llvm.module.flags = !{!0}

!0 = !{i32 2, !"Debug Info Version", i32 3}
