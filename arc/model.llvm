; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@"_arc_sim_emit_full_counter value" = internal constant [21 x i8] c"counter value = %zx\0A\00"

declare void @printf(ptr, ...)

declare void @free(ptr)

declare ptr @malloc(i64)

declare void @exit(i32)

define void @counter_eval(ptr %0) {
  %2 = load i1, ptr %0, align 1
  %3 = getelementptr i8, ptr %0, i32 1
  %4 = load i1, ptr %3, align 1
  store i1 %2, ptr %3, align 1
  %5 = xor i1 %4, %2
  %6 = and i1 %5, %2
  br i1 %6, label %7, label %11

7:                                                ; preds = %1
  %8 = getelementptr i8, ptr %0, i32 2
  %9 = load i8, ptr %8, align 1
  %10 = add i8 %9, 1
  store i8 %10, ptr %8, align 1
  br label %11

11:                                               ; preds = %7, %1
  %12 = getelementptr i8, ptr %0, i32 2
  %13 = load i8, ptr %12, align 1
  %14 = getelementptr i8, ptr %0, i32 3
  store i8 %13, ptr %14, align 1
  ret void
}

define void @entry() {
  %1 = call ptr @malloc(i64 4)
  call void @llvm.memset.p0.i64(ptr %1, i8 0, i64 4, i1 false)
  store i1 true, ptr %1, align 1
  call void @counter_eval(ptr %1)
  store i1 false, ptr %1, align 1
  call void @counter_eval(ptr %1)
  %2 = getelementptr i8, ptr %1, i32 3
  %3 = load i8, ptr %2, align 1
  %4 = zext i8 %3 to i64
  call void (ptr, ...) @printf(ptr @"_arc_sim_emit_full_counter value", i64 %4)
  call void @free(ptr %1)
  ret void
}

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: write)
declare void @llvm.memset.p0.i64(ptr writeonly captures(none), i8, i64, i1 immarg) #0

attributes #0 = { nocallback nofree nounwind willreturn memory(argmem: write) }

!llvm.module.flags = !{!0}

!0 = !{i32 2, !"Debug Info Version", i32 3}
