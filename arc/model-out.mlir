#loc2 = loc("model.mlir":2:1)
module {
  llvm.mlir.global internal constant @"_arc_sim_emit_full_Dut o"("Dut o = %zx\0A\00") {addr_space = 0 : i32} loc(#loc1)
  llvm.func @printf(!llvm.ptr, ...) loc(#loc)
  llvm.func @free(!llvm.ptr) loc(#loc)
  llvm.func @malloc(i64) -> !llvm.ptr loc(#loc)
  llvm.func @exit(i32) attributes {sym_visibility = "private"} loc(#loc)
  llvm.func @Dut_eval(%arg0: !llvm.ptr loc("model.mlir":2:1)) {
    %0 = llvm.mlir.constant(1 : i8) : i8 loc(#loc3)
    %1 = llvm.load %arg0 : !llvm.ptr -> i1 loc(#loc4)
    %2 = llvm.getelementptr %arg0[1] : (!llvm.ptr) -> !llvm.ptr, i8 loc(#loc4)
    llvm.store %1, %2 : i1, !llvm.ptr loc(#loc4)
    %3 = llvm.load %arg0 : !llvm.ptr -> i1 loc(#loc4)
    %4 = llvm.getelementptr %arg0[2] : (!llvm.ptr) -> !llvm.ptr, i8 loc(#loc4)
    %5 = llvm.load %4 : !llvm.ptr -> i1 loc(#loc4)
    llvm.store %3, %4 : i1, !llvm.ptr loc(#loc4)
    %6 = llvm.xor %5, %3 : i1 loc(#loc4)
    %7 = llvm.and %6, %3 : i1 loc(#loc4)
    llvm.cond_br %7, ^bb1, ^bb2 loc(#loc4)
  ^bb1:  // pred: ^bb0
    %8 = llvm.getelementptr %arg0[3] : (!llvm.ptr) -> !llvm.ptr, i8 loc(#loc5)
    %9 = llvm.load %8 : !llvm.ptr -> i8 loc(#loc5)
    %10 = llvm.add %9, %0 : i8 loc(#loc5)
    llvm.store %10, %8 : i8, !llvm.ptr loc(#loc5)
    llvm.br ^bb2 loc(#loc4)
  ^bb2:  // 2 preds: ^bb0, ^bb1
    %11 = llvm.getelementptr %arg0[3] : (!llvm.ptr) -> !llvm.ptr, i8 loc(#loc5)
    %12 = llvm.load %11 : !llvm.ptr -> i8 loc(#loc5)
    %13 = llvm.getelementptr %arg0[4] : (!llvm.ptr) -> !llvm.ptr, i8 loc(#loc6)
    llvm.store %12, %13 : i8, !llvm.ptr loc(#loc6)
    %14 = llvm.load %11 : !llvm.ptr -> i8 loc(#loc5)
    %15 = llvm.getelementptr %arg0[5] : (!llvm.ptr) -> !llvm.ptr, i8 loc(#loc5)
    llvm.store %14, %15 : i8, !llvm.ptr loc(#loc5)
    llvm.return loc(#loc2)
  } loc(#loc2)
  llvm.func @entry() {
    %0 = llvm.mlir.addressof @"_arc_sim_emit_full_Dut o" : !llvm.ptr loc(#loc3)
    %1 = llvm.mlir.constant(0 : i8) : i8 loc(#loc3)
    %2 = llvm.mlir.constant(false) : i1 loc(#loc3)
    %3 = llvm.mlir.constant(true) : i1 loc(#loc3)
    %4 = llvm.mlir.constant(6 : i64) : i64 loc(#loc8)
    %5 = llvm.call @malloc(%4) : (i64) -> !llvm.ptr loc(#loc8)
    "llvm.intr.memset"(%5, %1, %4) <{isVolatile = false}> : (!llvm.ptr, i8, i64) -> () loc(#loc8)
    llvm.store %3, %5 : i1, !llvm.ptr loc(#loc9)
    llvm.call @Dut_eval(%5) : (!llvm.ptr) -> () loc(#loc10)
    llvm.store %2, %5 : i1, !llvm.ptr loc(#loc11)
    llvm.call @Dut_eval(%5) : (!llvm.ptr) -> () loc(#loc12)
    %6 = llvm.getelementptr %5[4] : (!llvm.ptr) -> !llvm.ptr, i8 loc(#loc13)
    %7 = llvm.load %6 : !llvm.ptr -> i8 loc(#loc13)
    %8 = llvm.zext %7 : i8 to i64 loc(#loc1)
    llvm.call @printf(%0, %8) vararg(!llvm.func<void (ptr, ...)>) : (!llvm.ptr, i64) -> () loc(#loc1)
    llvm.call @free(%5) : (!llvm.ptr) -> () loc(#loc8)
    llvm.return loc(#loc14)
  } loc(#loc7)
} loc(#loc)
#loc = loc("model.mlir":0:0)
#loc1 = loc("model.mlir":27:5)
#loc3 = loc(unknown)
#loc4 = loc("model.mlir":2:19)
#loc5 = loc("model.mlir":5:9)
#loc6 = loc("model.mlir":3:10)
#loc7 = loc("model.mlir":11:1)
#loc8 = loc("model.mlir":15:3)
#loc9 = loc("model.mlir":17:5)
#loc10 = loc("model.mlir":18:5)
#loc11 = loc("model.mlir":21:5)
#loc12 = loc("model.mlir":22:5)
#loc13 = loc("model.mlir":25:13)
#loc14 = loc("model.mlir":30:3)
